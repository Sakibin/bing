export namespace emphasize {
  export {highlight}
  export {highlightAuto}
  export const listLanguages: typeof lowlight.listLanguages
  export const registerLanguage: typeof lowlight.registerLanguage
  export const registerAlias: ((
    language: string,
    alias: string | string[]
  ) => void) &
    ((aliases: Record<string, string | string[]>) => void)
  export const registered: typeof lowlight.registered
}
export type LowlightRoot = import('lowlight').Root
export type LowlightAutoOptions = import('lowlight').AutoOptions
export type LowlightElementSpan = import('lowlight/lib/core.js').Span
export type Text = import('lowlight/lib/core.js').Text
export type Result = LowlightRoot['data'] & {
  value: string
}
export type Style = (value: string) => string
export type Sheet = Record<string, Style>
export type AutoOptions = {
  sheet?: Sheet
  subset?: string[]
}
/**
 * Highlight `value` as `language`.
 *
 * @param {string} language Language name
 * @param {string} value Code value
 * @param {Sheet} [sheet] Style sheet
 * @returns {Result}
 */
declare function highlight(
  language: string,
  value: string,
  sheet?: Sheet | undefined
): Result
/**
 * Guess `value`s syntax.
 *
 * @param {string} value Code value
 * @param {Sheet|AutoOptions} [options] Style sheet or options
 * @returns {Result}
 */
declare function highlightAuto(
  value: string,
  options?: Sheet | AutoOptions | undefined
): Result
import {lowlight} from 'lowlight/lib/core.js'
export {}
